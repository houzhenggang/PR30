diff -Nru a/extensions/libipt_NOTIFY_USERAPPS.c b/extensions/libipt_NOTIFY_USERAPPS.c
--- a/extensions/libipt_NOTIFY_USERAPPS.c	1970-01-01 08:00:00.000000000 +0800
+++ b/extensions/libipt_NOTIFY_USERAPPS.c	2010-08-22 12:04:56.000000000 +0800
@@ -0,0 +1,129 @@
+/* Shared library add-on to iptables to add LOG support. */
+#include <errno.h>
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <syslog.h>
+#include <getopt.h>
+#include <xtables.h>
+#include <linux/netfilter_ipv4/ipt_notify_userapps.h>
+
+#define TRIGGER_DEFAULT_TIMER 		5			/*	5 Minutes	*/
+
+#define IPT_TRIGGER_PROCESSNAME 	0x01
+#define IPT_TRIGGER_TIMER 			0x02
+
+/* Function which prints out usage message. */
+static void	notify_userapps_help(void)
+{
+	printf(
+		"TRIGGER v%s options:\n"
+		" --trigger-processname processname\n"
+		" --trigger-timer timer (minute)\n\n",
+		XTABLES_VERSION);
+}
+
+static const struct option notify_userapps_opts[] = {
+	{ "trigger-processname", 1, 0, '!' },
+	{ "trigger-timer", 1, 0, '#' },
+	{ 0 }
+};
+
+/* Initialize the target. */
+static void notify_userapps_init(struct xt_entry_target *t)
+{
+	struct ipt_notify_userapps_info *triggerinfo = (struct ipt_notify_userapps_info *)t->data;
+	
+	triggerinfo->timer = TRIGGER_DEFAULT_TIMER;
+}
+
+static unsigned int parse_timer(const char *timer)
+{	
+	unsigned int lev = -1;
+
+	if (xtables_strtoui(timer, NULL, &lev, 0, 9999) == -1)
+		xtables_error(PARAMETER_PROBLEM, "trigger-timer `%s' unknown", timer);
+	
+	return lev;
+}
+
+/* Function which parses command options; returns true if it
+   ate an option */
+static int notfiy_userapps_parse(int c, char **argv, int invert, unsigned int *flags,
+                     const void *entry, struct xt_entry_target **target)
+{
+	struct ipt_notify_userapps_info *triggerinfo = (struct ipt_notify_userapps_info *)(*target)->data;
+
+	switch (c) {
+	case '!':
+		if (*flags & IPT_TRIGGER_PROCESSNAME)
+			xtables_error(PARAMETER_PROBLEM, "Can't specify --trigger-processname twice");
+
+		if (xtables_check_inverse(optarg, &invert, NULL, 0, argv))
+			xtables_error(PARAMETER_PROBLEM, "Unexpected `!' after --trigger-processname");
+
+		if (strlen(optarg) > sizeof(triggerinfo->process_name) - 1)
+			xtables_error(PARAMETER_PROBLEM, "Maximum prefix length %u for --trigger-processname", (int)(sizeof(triggerinfo->process_name) - 1));
+
+		strcpy(triggerinfo->process_name, optarg);
+		*flags |= IPT_TRIGGER_PROCESSNAME;
+		break;
+
+	case '#':
+		if (*flags & IPT_TRIGGER_TIMER)
+			xtables_error(PARAMETER_PROBLEM, "Can't specify --trigger-timer twice");
+
+		if (xtables_check_inverse(optarg, &invert, NULL, 0, argv))
+			xtables_error(PARAMETER_PROBLEM, "Unexpected `!' after --trigger-timer");
+
+		triggerinfo->timer = parse_timer(optarg);
+		*flags |= IPT_TRIGGER_TIMER;
+		break;
+
+	default:
+		return 0;
+	}
+	return 1;
+}
+
+/* Prints out the targinfo. */
+static void notify_userapps_print(const void *ip, const struct xt_entry_target *target, int numeric)
+{
+	const struct ipt_notify_userapps_info *triggerinfo = (const struct ipt_notify_userapps_info *)target->data;
+
+	if (strcmp(triggerinfo->process_name, "") != 0)
+		printf("process_name '%s' ", triggerinfo->process_name);
+
+	printf("timer '%d' ", triggerinfo->timer);
+}
+
+/* Saves the union ipt_targinfo in parsable form to stdout. */
+static void notfiy_userapps_save(const void *ip, const struct xt_entry_target *target)
+{
+	const struct ipt_notify_userapps_info *triggerinfo = (const struct ipt_notify_userapps_info *)target->data;
+
+	if (strcmp(triggerinfo->process_name, "") != 0)
+		printf("--trigger-processname \"%s\" ", triggerinfo->process_name);
+
+	printf("--trigger-timer \"%d\" ", triggerinfo->timer);
+}
+
+static struct xtables_target notify_userapps_target = {
+    .name          = "NOTIFY_USERAPPS",
+    .version       = XTABLES_VERSION,
+    .family        = NFPROTO_IPV4,
+    .size          = XT_ALIGN(sizeof(struct ipt_notify_userapps_info)),
+    .userspacesize = XT_ALIGN(sizeof(struct ipt_notify_userapps_info)),
+    .help          = notify_userapps_help,
+    .init          = notify_userapps_init,
+    .parse         = notfiy_userapps_parse,
+    .print         = notify_userapps_print,
+    .save          = notfiy_userapps_save,
+    .extra_opts    = notify_userapps_opts,
+};
+
+void _init(void)
+{
+	xtables_register_target(&notify_userapps_target);
+}
